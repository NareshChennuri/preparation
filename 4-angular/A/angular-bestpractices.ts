/*

 1. Project Structure & Architecture

    âœ… Follow feature-based folder structure (/features/login, /features/dashboard) instead of type-based.
    âœ… Use SharedModule and CoreModule:
        SharedModule: for components, pipes, and directives used across the app.
        CoreModule: for singleton services (like AuthService, LoggerService).
    âœ… Split into lazy-loaded feature modules to reduce initial bundle size.

ðŸ”¹ 2. Component Design

    âœ… Follow Smart (container) and Dumb (presentational) component pattern.
    âœ… Keep components small and focused (Single Responsibility Principle).
    âœ… Use @Input() and @Output() for communication instead of accessing child properties directly.
    âœ… Avoid tightly coupling services or logic into UI components.

ðŸ”¹ 3. State Management
    
    âœ… Use RxJS and observables for reactive patterns (e.g., BehaviorSubject, combineLatest).
    âœ… Use NgRx or Signals for complex or global app state.
    âœ… Always unsubscribe using takeUntil, async pipe, or Subscription.unsubscribe() to avoid memory leaks.

ðŸ”¹ 4. Routing Best Practices

    âœ… Define all routes in a dedicated routing module (feature-routing.module.ts).
    âœ… Use lazy loading for large modules.
    âœ… Use route guards (CanActivate, CanDeactivate) for auth and access control.
    âœ… Apply resolver services to load data before route activation.

ðŸ”¹ 5. Performance Optimization

    âœ… Use ChangeDetectionStrategy.OnPush for pure, stateless components.
    âœ… Use trackBy in *ngFor to avoid unnecessary re-renders.
    âœ… Lazy-load images and modules.
    âœ… Avoid logic in templatesâ€”move it to the component class.
    âœ… Use pure pipes for performance-critical data transformations.

ðŸ”¹ 6. Code Quality

    âœ… Enforce strict TypeScript settings (strictNullChecks, noImplicitAny).
    âœ… Use linting tools like ESLint and Prettier.
    âœ… Write unit tests for components, services, and pipes using Jasmine + Karma or Jest.
    âœ… Maintain high code coverage and follow the SOLID principles.

ðŸ”¹ 7. Forms
    
    âœ… Prefer Reactive Forms over template-driven for better scalability and control.
    âœ… Use FormBuilder for cleaner syntax.
    âœ… Centralize custom form validators and error messages.
    âœ… Keep form logic out of the HTML view.

ðŸ”¹ 8. Security
    
    âœ… Sanitize dynamic content to prevent XSS.
    âœ… Use DomSanitizer with caution and only when necessary.
    âœ… Implement role-based access on both UI and API.
    âœ… Use HttpInterceptor to add auth tokens and handle 401 globally.

ðŸ”¹ 9. Reusability & Modularity
    
    âœ… Create reusable components, pipes, and directives (ClickOutsideDirective, HighlightPipe).
    âœ… Use Angular Material or PrimeNG with custom themes for UI consistency.
    âœ… Break large components into smaller logical components.

ðŸ”¹ 10. Deployment & Environment
    
    âœ… Use environment.ts files for managing dev, staging, prod settings.
    âœ… Optimize build using ng build --prod or --configuration production.
    âœ… Enable source maps only for non-production builds.
    âœ… Use ngsw (Angular Service Worker) for PWA support if needed.




*/
